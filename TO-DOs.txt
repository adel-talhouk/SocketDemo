. Create a two-player networked game with shared world state.
. Make use of Memory Streams and different Packet Header types to synchronize the state between the two instances.
. Your game must have at least 10 synchronized objects in the world at once, with at least 3 different kinds of game objects.
. Gameplay must involve creating and destroying objects, which is then synchronized between clients.
. For this assignment, your "game" does not need to have an end state or a victory condition, or even much real "gameplay" at all. The point is just to synchronize game objects over a socket.

Requirements:

. Your code must be submitted as a pull request to the assignment2 branch of the github repository.
. The github action checks must be passing for your code.
. It must be possible for two players to connect to the game.
--> The above requirements are mandatory. If any of them are not met, your assignment will receive a 0.

Scott's Recommendations
For the game, I recommend you make something simple. For example, each player can press S to spawn an object and D to remove a random object, each of which floats around the screen randomly.


TO-DOs:
. Destroy GameObjects somehow (probably press backspace and a random one will delete, or right-click something)
. Have 10 gameobjects be there by default
. Networker::InitServer() --> change IP string to not be hard-coded (Adel had this in the last assignment, consult it) 
. Networker::InitServer() --> don't call destructors
. Networker::InitServer() --> set non blockign mode true
. Networker::Connect() --> don't hard-code address

Replicating pointers, replicate the data they point to.
Replicating vectors, replicate their size and data.
Replicating objects with virtual methods, replicate identifiers to hook up proper virtual function tables.
Replicating large arrays, omit unused elements.
